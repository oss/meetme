version: '3'

services:
  filebeat:
    image: filebeat-meetme
    user: root
    networks:
      - graylog
    volumes:
      #- /var/lib/docker:/var/lib/docker:ro
      #- /var/run/docker.sock:/var/run/docker.sock:ro
      - "/var/log/meetme:/logs"
    depends_on:
      - os01
    #  - os02
    #  - os03

  os01:
    image: opensearchproject/opensearch:2.5.0
    environment:
      OPENSEARCH_JAVA_OPTS: "-Xms1024m -Xmx1024m"
      node.name: os01
      #discovery.seed_hosts: os01,os02,os03
      #cluster.initial_master_nodes: os01,os02,os03
      plugins.security.ssl.transport.pemkey_filepath: certificates/os01/os01.key # relative path
      plugins.security.ssl.transport.pemcert_filepath: certificates/os01/os01.pem
      plugins.security.ssl.http.pemkey_filepath: certificates/os01/os01.key
      plugins.security.ssl.http.pemcert_filepath: certificates/os01/os01.pem
      #DISABLE_INSTALL_DEMO_CONFIG: "true"
      JAVA_HOME: /usr/share/opensearch/jdk
      bootstrap.memory_lock: "true" # along with the memlock settings below, disables swapping
      network.host: "0.0.0.0"
    ulimits: 
      memlock:
        soft: -1
        hard: -1
    volumes:
      - "./opensearch/opensearch.yml:/usr/share/opensearch/config/opensearch.yml"
      - "./opensearch/certs:/usr/share/opensearch/config/certificates:ro"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "1"
    networks:
      - graylog
  
  #graylog:
  #  image: graylog/graylog:5.2
  #  ports:
  #    - 9000:9000
  #    - 12201:12201
  #    - 1514:1514
  #    - 5555:5555
  #  networks:
  #    - mongo-net
  #    - graylog
  #  environment:
  #    - GRAYLOG_HTTP_BIND_ADDRESS=0.0.0.0:9000
  #    - GRAYLOG_PASSWORD_SECRET=THIS_IS_A_TEMP_PASSWORD
  #    - GRAYLOG_MONGODB_URI=mongodb://mongo:27017,mongo-jr:27017,mongo-the-third:27017/graylog?replicaSet=rs0
  #    - GRAYLOG_ELASTICSEARCH_HOSTS = os01:9200,os02:9200,os03:9200
  #    # Password: admin, is the sha256 of whatever the password is
  #    # printf "admin" | openssl sha256
  #    - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
  #  entrypoint: /usr/bin/tini -- wait-for-it os01:9200 --  /docker-entrypoint.sh
  #  depends_on:
  #    - mongo
  #    - os01
  #    - os02
  #    - os03

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitor-net
    labels:
      - prometheus-job=cadvisor
    command:
      - '-docker_only'
    deploy:
      mode: global

  graphana:
    image: graphana-oss-meetme
    networks:
      - monitor-net
      - graylog
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - 127.0.0.1:3000:3000

  prometheus:
    image: prometheus-oss-meetme
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - mongo-net
      - monitor-net
      - socat-net
    depends_on:
      - nginx-docker
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    #graphana docs have these, but idk if we need them
    #command:
    #  - '--config.file=/etc/prometheus/prometheus.yml'
    #  - '--storage.tsdb.path=/prometheus'
    #  - '--web.console.libraries=/etc/prometheus/console_libraries'
    #  - '--web.console.templates=/etc/prometheus/consoles'
    #  - '--web.enable-lifecycle'

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitor-net
    deploy:
      mode: global

  nginx:
    image: nginx-oss-meetme
    ports:
      - 80:80
      - 443:443
    networks:
      - monitor-net
      - no-internet
      - authnet
    depends_on:
      - prometheus
      - graphana
      - saml
      - backend
      - socket
      - mongo
    volumes:
      - /var/log/meetme/nginx:/logs
    deploy:
      mode: replicated
      replicas: 1

  nginx-docker:
    image: nginx-oss-docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitor-net
    privileged: true
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  mongo:
    image: database-meetme
    networks:
      - no-internet
      - mongo-net
  mongo-jr:
    image: database-meetme
    networks:
      - no-internet
      - mongo-net
    depends_on:
      - mongo
  mongo-the-third:
    image: database-meetme
    networks:
      - no-internet
      - mongo-net
    depends_on:
      - mongo

  mongoinit:
    image: mongo # this container will exit after executing the command
    restart: 'no'
    depends_on:
      - mongo
      - mongo-jr
      - mongo-the-third
    networks:
      - mongo-net
    command: >
      mongosh --host mongo:27017 --eval 'rs.initiate({
          "_id" : "rs0",
          "members" : [
            {
              "_id" : 0,
              "host" : "mongo:27017",
              "priority": 5
            },
            {
              "_id" : 1,
              "host" : "mongo-jr:27017",
              "priority": 1
            },
            {
              "_id" : 2,
              "host" : "mongo-the-third:27017",
              "priority": 1
            }
          ]
        });
        '

  backend:
    image: backend-meetme
    networks:
      - no-internet
      - authnet
      - monitor-net
    depends_on:
      - mongoinit
    volumes:
      - /var/log/meetme/backend:/logs
    deploy:
      mode: replicated
      replicas: 2

  frontend:
    image: frontend-meetme-webpack
    networks:
      - no-internet
      - monitor-net
    depends_on:
      - mongoinit
    volumes:
      - ./frontend:/root
    deploy:
      mode: replicated
      replicas: 1

  socket:
    image: websocket-meetme
    networks:
      - no-internet
      - mongo-net
    deploy:
      mode: replicated
      replicas: 2

  openldap:
    image: bitnami/openldap:2
    environment:
      - LDAP_ADMIN_USERNAME=admin
      - LDAP_ADMIN_PASSWORD=adminpassword
      - LDAP_USERS=netid1,netid2,netid3,netid4,netid5,netid6
      - LDAP_PASSWORDS=rutgers1,rutgers2,rutgers3,rutgers4,rutgers5,rutgers6
      - BITNAMI_DEBUG=true
    networks:
      - authnet
    volumes:
      - ./openldap_data:/bitnami/openldap
      - ./ldaptest/eduPerson.ldif:/schema/custom.ldif
      - ./ldaptest/bootstrap.ldif:/ldifs/bootstrap.ldif

  shibboleth:
    image: shibboleth-idp-meetme
    networks:
      - authnet
      - no-internet
    environment:
      - JAVA_OPTS=-Djava.security.egd=file:/dev/urandom -Xmx3000m
    ports:
      - 4443:443
    links:
      - 'backend:api.localhost.edu'

  saml:
    image: kristophjunge/test-saml-idp
    environment:
      - SIMPLESAMLPHP_SP_ENTITY_ID=saml-poc
      - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=https://api.localhost.edu/login
      - SIMPLESAMLPHP_SP_SINGLE_LOGOUT_SERVICE=http://api.localhost.edu/logout
    networks:
      - authnet
    volumes:
      - ./saml/users.php:/var/www/simplesamlphp/config/authsources.php

networks:
  graylog: 
    driver: overlay
    attachable: true
  no-internet:
    driver: overlay
    attachable: true
  authnet:
    driver: overlay
    attachable: true
  mongo-net:
    driver: overlay
    attachable: true
  monitor-net:
    driver: overlay
    attachable: true
  socat-net:
    driver: overlay
    attachable: true
