variables:
  FF_NETWORK_PER_BUILD: 1
  #CI_DEBUG_SERVICES: 1


.job_template:
  &job_configuration # Hidden yaml configuration that defines an anchor named 'job_configuration'
  services:
    - name: ${CI_REGISTRY_IMAGE}/saml
      alias: shib-idp idp.localhost.edu
      variables:
        JAVA_OPTS: -Djava.security.egd=file:/dev/urandom -Xmx3000m
    - name: ${CI_REGISTRY_IMAGE}/frontend
      alias: frontend localhost.edu
    - name: ${CI_REGISTRY_IMAGE}/websocket
      alias: socket
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          sleep 80;
          node main.js;
    - name: ${CI_REGISTRY_IMAGE}/database
      alias: mongo
    - name: ${CI_REGISTRY_IMAGE}/database
      alias: mongo-jr
    - name: ${CI_REGISTRY_IMAGE}/database
      alias: mongo-the-third

    - name: ${CI_REGISTRY_IMAGE}/backend
      alias: backend api.localhost.edu
      variables:
        LOGIN_URL: https://idp.localhost.edu:4443/idp/profile/SAML2/Redirect/SSO
      command:
        - '/bin/bash'
        - '-c'
        - |
          nginx_ip=$(getent hosts nginx | cut -d " " -f 1);
          echo "$nginx_ip localhost.edu" >> /etc/hosts;
          echo "$nginx_ip api.localhost.edu" >> /etc/hosts;
          echo "$nginx_ip saml.localhost.edu" >> /etc/hosts;
          echo "$(getent hosts openldap | cut -d " " -f 1) ldap.localhost.edu" >> /etc/hosts;
          echo "$(getent hosts saml | cut -d " " -f 1) idp.localhost.edu" >> /etc/hosts
          sleep 80 && node main.js;

    - name: bitnami/openldap:2
      alias: openldap
      variables:
        LDAP_ADMIN_USERNAME: admin
        LDAP_ADMIN_PASSWORD: adminpassword
        LDAP_USERS: netid1,netid2,netid3,netid4,netid5,netid6
        LDAP_PASSWORDS: rutgers1,rutgers2,rutgers3,rutgers4,rutgers5,rutgers6
    - name: ${CI_REGISTRY_IMAGE}/proxy
      alias: nginx
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          # wait for signal from backend
          apt-get install curl -y;
          curl -s http://backend:8000 > /dev/stdout;
          while [ $? -ne 0 ]; do sleep 1 && echo "waiting for backend to start" && curl -s http://backend:8000; done;
          # curl saml:8080/simplesaml > /dev/stdout
          # while [ $? -ne 0 ]; do sleep 1 && echo "waiting for saml to start" && curl -s saml:8080/simplesaml; done;
          # pass control to the default image entrypoint
          exec /root/docker-entrypoint.sh "$@"
        - '/bin/bash'

stages:
  - build
  - pre-test
  - test

backend-api:
  <<: *job_configuration
  stage: test
  image:
    name: ${CI_REGISTRY_IMAGE}/test-suite
    entrypoint: ['']
  before_script:
    - |
      mongosh --host mongo:27017 --eval 'rs.initiate({"_id" : "rs0","members" : [{"_id" : 0,"host" : "mongo:27017","priority": 5},{"_id" : 1,"host" : "mongo-jr:27017","priority": 1},{"_id" : 2,"host" : "mongo-the-third:27017","priority": 1}]});'
    - echo "past"
    - bash -c 'curl backend:8000; while [ $? -ne 0 ]; do sleep 1 && echo "waiting for backend to start" && curl -s http://backend:8000; done;'
  script:
    - apt-get install bc -y
    - cd /root
    - ldapsearch -H ldap://openldap:1389 -x -b "dc=example,dc=org" -D 'cn=admin,dc=example,dc=org' -w 'adminpassword'
    - sleep 30
    - node "scripts/getsession.js" "netid1" "rutgers1"
    - ./docker-entrypoint.sh --formatter junit
    - ls /root/test_output
    - cp -r /root/test_output ${CI_PROJECT_DIR}/test_output
    - touch ${CI_PROJECT_DIR}/merged.xml
    - for i in $(ls ${CI_PROJECT_DIR}/test_output); do cat ${CI_PROJECT_DIR}/test_output/$i >> ${CI_PROJECT_DIR}/merged.xml; done;
    - TOTAL_TIME=$(cat ${CI_PROJECT_DIR}/merged.xml | grep -E '<testsuites time="[0-9]+\.[0-9]+">' | grep -Eo '[0-9]+\.[0-9]+' | paste -sd+ | bc )
    - sed -i 's/^<?xml version="1.0" encoding="UTF-8"?>$//g;s/<testsuites time="[0-9]\+\.[0-9]\+">//g;s/<\/testsuites>//g;/^$/d' ${CI_PROJECT_DIR}/merged.xml
    - sed -i "1s/^/<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"$TOTAL_TIME\">\n/" ${CI_PROJECT_DIR}/merged.xml
    - echo "</testsuites>" >> ${CI_PROJECT_DIR}/merged.xml

  dependencies:
    - build-backend
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/test_output/*.xml
      - ${CI_PROJECT_DIR}/merged.xml
    reports:
      junit: ${CI_PROJECT_DIR}/merged.xml

frontend-lint:
  image:
    name: ${CI_REGISTRY_IMAGE}/frontend-lint
    entrypoint: ['']
  script:
    - npm install eslint eslint-plugin-react @babel/core @babel/eslint-parser
    - npx eslint -c "${CI_PROJECT_DIR}/testing/frontend/linter/eslint.config.cjs" --color --format junit "${CI_PROJECT_DIR}/frontend/**/*.{jsx,js}" > ${CI_PROJECT_DIR}/linter_results.xml
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/linter_results.xml
    reports:
      junit: ${CI_PROJECT_DIR}/linter_results.xml
  dependencies:
    - build-frontend
    - build-eslint


build-backend:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_TAG}"
      --build-arg=GIT_BRANCH="${CI_COMMIT_BRANCH}"
      --build-arg=GIT_HASH="${CI_COMMIT_SHA}"
      --build-arg=DEV="true"
      --build-arg=LOGIN_URL="https://idp.localhost.edu/idp/profile/SAML2/Redirect/SSO"

build-frontend:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_TAG}"
      --build-arg=BUILD="dev"

build-nginx:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - rm ${CI_PROJECT_DIR}/proxy/nginx/conf.d/graphana.conf
    - rm ${CI_PROJECT_DIR}/proxy/nginx/conf.d/prom.conf
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/proxy"
      --dockerfile "${CI_PROJECT_DIR}/proxy/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/proxy:${CI_COMMIT_TAG}"

build-mongo:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/database"
      --dockerfile "${CI_PROJECT_DIR}/database/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/database:${CI_COMMIT_TAG}"

build-docker-proxy:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/proxy-docker"
      --dockerfile "${CI_PROJECT_DIR}/proxy-docker/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/proxy-docker:${CI_COMMIT_TAG}"

build-websocket:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/websocket"
      --dockerfile "${CI_PROJECT_DIR}/websocket/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/websocket:${CI_COMMIT_TAG}"

build-saml:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/shib-idp"
      --dockerfile "${CI_PROJECT_DIR}/shib-idp/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/saml:${CI_COMMIT_TAG}"

build-test:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/testing/backend-testing"
      --dockerfile "${CI_PROJECT_DIR}/testing/backend-testing/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/test-suite:${CI_COMMIT_TAG}"

build-eslint:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/testing/frontend/linter"
      --dockerfile "${CI_PROJECT_DIR}/testing/frontend/linter/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend-lint:${CI_COMMIT_TAG}"

build-puppeteer:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/testing/puppeteer"
      --dockerfile "Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/puppeteer:${CI_COMMIT_TAG}"

