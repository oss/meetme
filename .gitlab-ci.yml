variables:
  FF_NETWORK_PER_BUILD: 1
#  CI_DEBUG_SERVICES: 1

stages:
  - build-env
  - build
  - pre-test
  - test

.job_template:
  &job_configuration # Hidden yaml configuration that defines an anchor named 'job_configuration'
  services:
    - name: ${CI_REGISTRY_IMAGE}/saml
      alias: saml idp.localhost.edu
    - name: ${CI_REGISTRY_IMAGE}/frontend
      alias: frontend
    - name: ${CI_REGISTRY_IMAGE}/websocket
      alias: socket
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          sleep 80;
          node main.js;
    - name: ${CI_REGISTRY_IMAGE}/database
      alias: mongo
    - name: ${CI_REGISTRY_IMAGE}/database
      alias: mongo-jr
    - name: ${CI_REGISTRY_IMAGE}/database
      alias: mongo-the-third

    - name: mongo:latest
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          mongosh --host mongo:27017 --eval 'rs.initiate({"_id" : "rs0","members" : [{"_id" : 0,"host" : "mongo:27017","priority": 5},{"_id" : 1,"host" : "mongo-jr:27017","priority": 1},{"_id" : 2,"host" : "mongo-the-third:27017","priority": 1}]});';
          while [ $? -ne 0 ]; do sleep 2 && mongosh --host mongo:27017 --eval 'rs.initiate({"_id" : "rs0","members" : [{"_id" : 0,"host" : "mongo:27017","priority": 5},{"_id" : 1,"host" : "mongo-jr:27017","priority": 1},{"_id" : 2,"host" : "mongo-the-third:27017","priority": 1}]});'; done;

    - name: ${CI_REGISTRY_IMAGE}/backend
      alias: backend
      command:
        - '/bin/bash'
        - '-c'
        - |
          sleep 80;
          node main.js;

    - name: bitnami/openldap:2
      alias: openldap ldap.localhost.edu
      variables:
        LDAP_ADMIN_USERNAME: admin
        LDAP_ADMIN_PASSWORD: adminpassword
        LDAP_USERS: netid1,netid2,netid3,netid4,netid5,netid6
        LDAP_PASSWORDS: rutgers1,rutgers2,rutgers3,rutgers4,rutgers5,rutgers6
    - name: ${CI_REGISTRY_IMAGE}/proxy
      alias: nginx localhost.edu api.localhost.edu

backend-api:
  <<: *job_configuration
  stage: test
  image:
    name: ${CI_REGISTRY_IMAGE}/test-suite
    entrypoint: ['']
  before_script:
    - |
      mongosh --host mongo:27017 --eval 'rs.initiate({"_id" : "rs0","members" : [{"_id" : 0,"host" : "mongo:27017","priority": 5},{"_id" : 1,"host" : "mongo-jr:27017","priority": 1},{"_id" : 2,"host" : "mongo-the-third:27017","priority": 1}]});'
    - echo "past"
    - bash -c 'curl backend:8000; while [ $? -ne 0 ]; do sleep 1 && echo "waiting for backend to start" && curl -s http://backend:8000; done;'
  script:
    - apt-get install bc -y
    - cd
    - ls
    - /bin/bash /root/docker-entrypoint.sh --formatter junit
    - cp -r /root/test_output ${CI_PROJECT_DIR}/test_output
    - touch ${CI_PROJECT_DIR}/merged.xml
    - for i in $(ls ${CI_PROJECT_DIR}/test_output); do cat ${CI_PROJECT_DIR}/test_output/$i >> ${CI_PROJECT_DIR}/merged.xml; done;
    - TOTAL_TIME=$(cat ${CI_PROJECT_DIR}/merged.xml | grep -E '<testsuites time="[0-9]+\.[0-9]+">' | grep -Eo '[0-9]+\.[0-9]+' | paste -sd+ | bc )
    - sed -i 's/^<?xml version="1.0" encoding="UTF-8"?>$//g;s/<testsuites time="[0-9]\+\.[0-9]\+">//g;s/<\/testsuites>//g;/^$/d' ${CI_PROJECT_DIR}/merged.xml
    - sed -i "1s/^/<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites time=\"$TOTAL_TIME\">\n/" ${CI_PROJECT_DIR}/merged.xml
    - echo "</testsuites>" >> ${CI_PROJECT_DIR}/merged.xml
  needs: [ "build-backend", "build-frontend", "build-nginx", "build-mongo", "build-websocket", "build-saml" ]

  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/test_output/*.xml
      - ${CI_PROJECT_DIR}/merged.xml
    reports:
      junit: ${CI_PROJECT_DIR}/merged.xml

frontend-lint:
  stage: test
  image:
    name: ${CI_REGISTRY_IMAGE}/frontend-lint
    entrypoint: ['']
  script:
    - npm install eslint eslint-plugin-react @babel/core @babel/eslint-parser
    - npx eslint -c "${CI_PROJECT_DIR}/testing/frontend/linter/eslint.config.cjs" --color --format junit "${CI_PROJECT_DIR}/frontend/**/*.{jsx,js}" > ${CI_PROJECT_DIR}/linter_results.xml
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/linter_results.xml
    reports:
      junit: ${CI_PROJECT_DIR}/linter_results.xml
  needs: ["build-frontend", "build-eslint"]

backend-docs-uptodate:
  image:
    name: ${CI_REGISTRY_IMAGE}/test-docs
    entrypoint: []
  needs: [ "build-docs-testing" ]
  stage: test
  script:
    - PROJECT_DIR="${CI_PROJECT_DIR}" /bin/bash /root/verify_updated_docs.sh


build-docs-testing:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/testing/docs"
      --dockerfile "${CI_PROJECT_DIR}/testing/docs/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/test-docs:${CI_COMMIT_TAG}"

build-backend:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  variables: 
    GIT_BRANCH: ${CI_COMMIT_BRANCH}
    GIT_HASH: ${CI_COMMIT_SHA}
  stage: build
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_TAG}"
      --build-arg GIT_BRANCH
      --build-arg GIT_HASH

build-frontend:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_TAG}"
      --build-arg=BUILD="dev"

build-nginx:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - rm ${CI_PROJECT_DIR}/proxy/nginx/conf.d/graphana.conf
    - rm ${CI_PROJECT_DIR}/proxy/nginx/conf.d/prom.conf
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/proxy"
      --dockerfile "${CI_PROJECT_DIR}/proxy/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/proxy:${CI_COMMIT_TAG}"

build-mongo:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/database"
      --dockerfile "${CI_PROJECT_DIR}/database/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/database:${CI_COMMIT_TAG}"

build-docker-proxy:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/proxy-docker"
      --dockerfile "${CI_PROJECT_DIR}/proxy-docker/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/proxy-docker:${CI_COMMIT_TAG}"

build-websocket:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/websocket"
      --dockerfile "${CI_PROJECT_DIR}/websocket/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/websocket:${CI_COMMIT_TAG}"

build-saml:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  stage: build
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/shib-idp"
      --dockerfile "${CI_PROJECT_DIR}/shib-idp/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/saml:${CI_COMMIT_TAG}"

build-test:
  stage: build-env
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/testing/backend-testing"
      --dockerfile "${CI_PROJECT_DIR}/testing/backend-testing/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/test-suite:${CI_COMMIT_TAG}"

build-eslint:
  stage: build-env
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/testing/frontend/linter"
      --dockerfile "${CI_PROJECT_DIR}/testing/frontend/linter/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend-lint:${CI_COMMIT_TAG}"

build-docs-env:
  stage: build-env
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --context "dir://${CI_PROJECT_DIR}/docs"
      --dockerfile "${CI_PROJECT_DIR}/docs/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/docs:${CI_COMMIT_TAG}"

build-docs:
  stage: build
  needs: ["build-docs-env"]
  image:
    name: ${CI_REGISTRY_IMAGE}/docs
    entrypoint: ['']
  script:
    - mkdocs build -f docs/mkdocs.yml -d ${CI_PROJECT_DIR}/build
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/build/



build-tsc-env:
  stage: build-env
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - /kaniko/executor
      --dockerfile "${CI_PROJECT_DIR}/testing/frontend/type_checking/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/tscheck:${CI_COMMIT_TAG}"

typecheck-frontend:
  stage: test
  image:
    name: tscheck
    entrypoint: ['']
  script:
    - npx tsc -p ${CI_PROJECT_DIR}/frontend/tsconfig.json
  needs: ['build-tsc-env','build-frontend']

